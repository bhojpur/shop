// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopServiceClient is the client API for ShopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopServiceClient interface {
	// StartLocalBranch starts a Branch on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the shop/config.yaml
	//   3. all bytes constituting the Branch YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalBranch(ctx context.Context, opts ...grpc.CallOption) (ShopService_StartLocalBranchClient, error)
	// StartFromPreviousBranch starts a new Branch based on a previous one.
	// If the previous Branch does not have the can-replay condition set this call will result in an error.
	StartFromPreviousBranch(ctx context.Context, in *StartFromPreviousBranchRequest, opts ...grpc.CallOption) (*StartBranchResponse, error)
	// StartBranchRequest starts a new Branch based on its specification.
	StartBranch(ctx context.Context, in *StartBranchRequest, opts ...grpc.CallOption) (*StartBranchResponse, error)
	// Searches for Branch known to this instance
	ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*ListBranchResponse, error)
	// Subscribe listens to new Branch updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ShopService_SubscribeClient, error)
	// GetBranch retrieves details of a single Branch
	GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error)
	// Listen listens to Branch updates and log output of a running Branch
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ShopService_ListenClient, error)
	// StopBranch stops a currently running Branch
	StopBranch(ctx context.Context, in *StopBranchRequest, opts ...grpc.CallOption) (*StopBranchResponse, error)
}

type shopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopServiceClient(cc grpc.ClientConnInterface) ShopServiceClient {
	return &shopServiceClient{cc}
}

func (c *shopServiceClient) StartLocalBranch(ctx context.Context, opts ...grpc.CallOption) (ShopService_StartLocalBranchClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopService_ServiceDesc.Streams[0], "/v1.ShopService/StartLocalBranch", opts...)
	if err != nil {
		return nil, err
	}
	x := &shopServiceStartLocalBranchClient{stream}
	return x, nil
}

type ShopService_StartLocalBranchClient interface {
	Send(*StartLocalBranchRequest) error
	CloseAndRecv() (*StartBranchResponse, error)
	grpc.ClientStream
}

type shopServiceStartLocalBranchClient struct {
	grpc.ClientStream
}

func (x *shopServiceStartLocalBranchClient) Send(m *StartLocalBranchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shopServiceStartLocalBranchClient) CloseAndRecv() (*StartBranchResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartBranchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopServiceClient) StartFromPreviousBranch(ctx context.Context, in *StartFromPreviousBranchRequest, opts ...grpc.CallOption) (*StartBranchResponse, error) {
	out := new(StartBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.ShopService/StartFromPreviousBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) StartBranch(ctx context.Context, in *StartBranchRequest, opts ...grpc.CallOption) (*StartBranchResponse, error) {
	out := new(StartBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.ShopService/StartBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) ListBranch(ctx context.Context, in *ListBranchRequest, opts ...grpc.CallOption) (*ListBranchResponse, error) {
	out := new(ListBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.ShopService/ListBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ShopService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopService_ServiceDesc.Streams[1], "/v1.ShopService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &shopServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShopService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type shopServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *shopServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopServiceClient) GetBranch(ctx context.Context, in *GetBranchRequest, opts ...grpc.CallOption) (*GetBranchResponse, error) {
	out := new(GetBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.ShopService/GetBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (ShopService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShopService_ServiceDesc.Streams[2], "/v1.ShopService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &shopServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ShopService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type shopServiceListenClient struct {
	grpc.ClientStream
}

func (x *shopServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *shopServiceClient) StopBranch(ctx context.Context, in *StopBranchRequest, opts ...grpc.CallOption) (*StopBranchResponse, error) {
	out := new(StopBranchResponse)
	err := c.cc.Invoke(ctx, "/v1.ShopService/StopBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServiceServer is the server API for ShopService service.
// All implementations must embed UnimplementedShopServiceServer
// for forward compatibility
type ShopServiceServer interface {
	// StartLocalBranch starts a Branch on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the shop/config.yaml
	//   3. all bytes constituting the Branch YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalBranch(ShopService_StartLocalBranchServer) error
	// StartFromPreviousBranch starts a new Branch based on a previous one.
	// If the previous Branch does not have the can-replay condition set this call will result in an error.
	StartFromPreviousBranch(context.Context, *StartFromPreviousBranchRequest) (*StartBranchResponse, error)
	// StartBranchRequest starts a new Branch based on its specification.
	StartBranch(context.Context, *StartBranchRequest) (*StartBranchResponse, error)
	// Searches for Branch known to this instance
	ListBranch(context.Context, *ListBranchRequest) (*ListBranchResponse, error)
	// Subscribe listens to new Branch updates
	Subscribe(*SubscribeRequest, ShopService_SubscribeServer) error
	// GetBranch retrieves details of a single Branch
	GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error)
	// Listen listens to Branch updates and log output of a running Branch
	Listen(*ListenRequest, ShopService_ListenServer) error
	// StopBranch stops a currently running Branch
	StopBranch(context.Context, *StopBranchRequest) (*StopBranchResponse, error)
	mustEmbedUnimplementedShopServiceServer()
}

// UnimplementedShopServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShopServiceServer struct {
}

func (UnimplementedShopServiceServer) StartLocalBranch(ShopService_StartLocalBranchServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalBranch not implemented")
}
func (UnimplementedShopServiceServer) StartFromPreviousBranch(context.Context, *StartFromPreviousBranchRequest) (*StartBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousBranch not implemented")
}
func (UnimplementedShopServiceServer) StartBranch(context.Context, *StartBranchRequest) (*StartBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartBranch not implemented")
}
func (UnimplementedShopServiceServer) ListBranch(context.Context, *ListBranchRequest) (*ListBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranch not implemented")
}
func (UnimplementedShopServiceServer) Subscribe(*SubscribeRequest, ShopService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedShopServiceServer) GetBranch(context.Context, *GetBranchRequest) (*GetBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBranch not implemented")
}
func (UnimplementedShopServiceServer) Listen(*ListenRequest, ShopService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedShopServiceServer) StopBranch(context.Context, *StopBranchRequest) (*StopBranchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopBranch not implemented")
}
func (UnimplementedShopServiceServer) mustEmbedUnimplementedShopServiceServer() {}

// UnsafeShopServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopServiceServer will
// result in compilation errors.
type UnsafeShopServiceServer interface {
	mustEmbedUnimplementedShopServiceServer()
}

func RegisterShopServiceServer(s grpc.ServiceRegistrar, srv ShopServiceServer) {
	s.RegisterService(&ShopService_ServiceDesc, srv)
}

func _ShopService_StartLocalBranch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShopServiceServer).StartLocalBranch(&shopServiceStartLocalBranchServer{stream})
}

type ShopService_StartLocalBranchServer interface {
	SendAndClose(*StartBranchResponse) error
	Recv() (*StartLocalBranchRequest, error)
	grpc.ServerStream
}

type shopServiceStartLocalBranchServer struct {
	grpc.ServerStream
}

func (x *shopServiceStartLocalBranchServer) SendAndClose(m *StartBranchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shopServiceStartLocalBranchServer) Recv() (*StartLocalBranchRequest, error) {
	m := new(StartLocalBranchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ShopService_StartFromPreviousBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).StartFromPreviousBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ShopService/StartFromPreviousBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).StartFromPreviousBranch(ctx, req.(*StartFromPreviousBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_StartBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).StartBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ShopService/StartBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).StartBranch(ctx, req.(*StartBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).ListBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ShopService/ListBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).ListBranch(ctx, req.(*ListBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShopServiceServer).Subscribe(m, &shopServiceSubscribeServer{stream})
}

type ShopService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type shopServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *shopServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ShopService_GetBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ShopService/GetBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetBranch(ctx, req.(*GetBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ShopServiceServer).Listen(m, &shopServiceListenServer{stream})
}

type ShopService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type shopServiceListenServer struct {
	grpc.ServerStream
}

func (x *shopServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ShopService_StopBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopBranchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).StopBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.ShopService/StopBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).StopBranch(ctx, req.(*StopBranchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShopService_ServiceDesc is the grpc.ServiceDesc for ShopService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShopService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.ShopService",
	HandlerType: (*ShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousBranch",
			Handler:    _ShopService_StartFromPreviousBranch_Handler,
		},
		{
			MethodName: "StartBranch",
			Handler:    _ShopService_StartBranch_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _ShopService_ListBranch_Handler,
		},
		{
			MethodName: "GetBranch",
			Handler:    _ShopService_GetBranch_Handler,
		},
		{
			MethodName: "StopBranch",
			Handler:    _ShopService_StopBranch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalBranch",
			Handler:       _ShopService_StartLocalBranch_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ShopService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _ShopService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "shop.proto",
}
